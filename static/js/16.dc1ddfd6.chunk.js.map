{"version":3,"sources":["components/DisplacementSphere/index.js","components/DisplacementSphere/sphereVertShader.js","components/DisplacementSphere/sphereFragShader.js"],"names":["DisplacementSphere","props","theme","useTheme","rgbBackground","themeId","colorWhite","canvas","useRef","mouse","renderer","camera","scene","lights","uniforms","material","geometry","sphere","tweenRef","sphereSpring","prefersReducedMotion","usePrefersReducedMotion","isInViewport","useInViewport","windowSize","useWindowSize","useEffect","innerWidth","innerHeight","window","current","Vector2","WebGLRenderer","antialias","powerPreference","setSize","setPixelRatio","outputEncoding","sRGBEncoding","PerspectiveCamera","position","z","Scene","MeshPhongMaterial","onBeforeCompile","shader","UniformsUtils","merge","UniformsLib","time","type","value","vertexShader","fragmentShader","SphereGeometry","Mesh","add","cleanScene","cleanRenderer","dirLight","DirectionalLight","ambientLight","AmbientLight","set","background","Color","rgbToThreeColor","forEach","light","removeLights","width","height","adjustedHeight","aspect","updateProjectionMatrix","render","media","mobile","x","y","tablet","onMouseMove","event","rotation","clientX","clientY","toArray","values","spring","from","get","to","stiffness","damping","velocity","getVelocity","mass","restSpeed","start","addEventListener","removeEventListener","stop","setAnimationLoop","undefined","Transition","appear","in","onEnter","reflow","timeout","status","aria-hidden","className","classNames","ref"],"mappings":"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","file":"static/js/16.dc1ddfd6.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react';\nimport classNames from 'classnames';\nimport {\n  Vector2,\n  sRGBEncoding,\n  WebGLRenderer,\n  PerspectiveCamera,\n  Scene,\n  DirectionalLight,\n  AmbientLight,\n  UniformsUtils,\n  UniformsLib,\n  MeshPhongMaterial,\n  SphereGeometry,\n  Mesh,\n  Color,\n} from 'three';\nimport { spring, value } from 'popmotion';\nimport vertShader from './sphereVertShader';\nimport fragShader from './sphereFragShader';\nimport { Transition } from 'react-transition-group';\nimport { useTheme } from 'components/ThemeProvider';\nimport { usePrefersReducedMotion, useInViewport, useWindowSize } from 'hooks';\nimport { reflow } from 'utils/transition';\nimport { media, rgbToThreeColor } from 'utils/style';\nimport { cleanScene, removeLights, cleanRenderer } from 'utils/three';\nimport './index.css';\n\nconst DisplacementSphere = props => {\n  const theme = useTheme();\n  const { rgbBackground, themeId, colorWhite } = theme;\n  const canvas = useRef();\n  const mouse = useRef();\n  const renderer = useRef();\n  const camera = useRef();\n  const scene = useRef();\n  const lights = useRef();\n  const uniforms = useRef();\n  const material = useRef();\n  const geometry = useRef();\n  const sphere = useRef();\n  const tweenRef = useRef();\n  const sphereSpring = useRef();\n  const prefersReducedMotion = usePrefersReducedMotion();\n  const isInViewport = useInViewport(canvas);\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    const { innerWidth, innerHeight } = window;\n    mouse.current = new Vector2(0.8, 0.5);\n    renderer.current = new WebGLRenderer({\n      canvas: canvas.current,\n      antialias: false,\n      powerPreference: 'high-performance',\n    });\n    renderer.current.setSize(innerWidth, innerHeight);\n    renderer.current.setPixelRatio(1);\n    renderer.current.outputEncoding = sRGBEncoding;\n\n    camera.current = new PerspectiveCamera(54, innerWidth / innerHeight, 0.1, 100);\n    camera.current.position.z = 52;\n\n    scene.current = new Scene();\n\n    material.current = new MeshPhongMaterial();\n    material.current.onBeforeCompile = shader => {\n      uniforms.current = UniformsUtils.merge([\n        UniformsLib['ambient'],\n        UniformsLib['lights'],\n        shader.uniforms,\n        { time: { type: 'f', value: 0 } },\n      ]);\n\n      shader.uniforms = uniforms.current;\n      shader.vertexShader = vertShader;\n      shader.fragmentShader = fragShader;\n    };\n\n    geometry.current = new SphereGeometry(32, 128, 128);\n\n    sphere.current = new Mesh(geometry.current, material.current);\n    scene.current.add(sphere.current);\n\n    return () => {\n      cleanScene(scene.current);\n      cleanRenderer(renderer.current);\n    };\n  }, []);\n\n  useEffect(() => {\n    const dirLight = new DirectionalLight(colorWhite, 0.6);\n    const ambientLight = new AmbientLight(colorWhite, themeId === 'light' ? 0.8 : 0.1);\n\n    dirLight.position.set(100, 100, 200);\n\n    lights.current = [dirLight, ambientLight];\n    scene.current.background = new Color(...rgbToThreeColor(rgbBackground));\n    lights.current.forEach(light => scene.current.add(light));\n\n    return () => {\n      removeLights(lights.current);\n    };\n  }, [rgbBackground, colorWhite, themeId]);\n\n  useEffect(() => {\n    const { width, height } = windowSize;\n\n    const adjustedHeight = height * 1.3;\n    renderer.current.setSize(width, adjustedHeight);\n    camera.current.aspect = width / adjustedHeight;\n    camera.current.updateProjectionMatrix();\n\n    // Render a single frame on resize when not animating\n    if (prefersReducedMotion) {\n      renderer.current.render(scene.current, camera.current);\n    }\n\n    if (width <= media.mobile) {\n      sphere.current.position.x = 14;\n      sphere.current.position.y = 10;\n    } else if (width <= media.tablet) {\n      sphere.current.position.x = 18;\n      sphere.current.position.y = 14;\n    } else {\n      sphere.current.position.x = 22;\n      sphere.current.position.y = 16;\n    }\n  }, [prefersReducedMotion, windowSize]);\n\n  useEffect(() => {\n    const onMouseMove = event => {\n      const { rotation } = sphere.current;\n\n      const position = {\n        x: event.clientX / window.innerWidth,\n        y: event.clientY / window.innerHeight,\n      };\n\n      if (!sphereSpring.current) {\n        sphereSpring.current = value(rotation.toArray(), values => {\n          rotation.set(values[0], values[1], sphere.current.rotation.z);\n        });\n      }\n\n      tweenRef.current = spring({\n        from: sphereSpring.current.get(),\n        to: [position.y / 2, position.x / 2],\n        stiffness: 30,\n        damping: 20,\n        velocity: sphereSpring.current.getVelocity(),\n        mass: 2,\n        restSpeed: 0.0001,\n      }).start(sphereSpring.current);\n    };\n\n    if (!prefersReducedMotion && isInViewport) {\n      window.addEventListener('mousemove', onMouseMove);\n    }\n\n    return () => {\n      window.removeEventListener('mousemove', onMouseMove);\n      tweenRef.current?.stop();\n    };\n  }, [isInViewport, prefersReducedMotion]);\n\n  useEffect(() => {\n    if (!prefersReducedMotion && isInViewport) {\n      renderer.current.setAnimationLoop(time => {\n        if (uniforms.current !== undefined) {\n          uniforms.current.time.value = time / 20000;\n        }\n\n        sphere.current.rotation.z = time / 25000;\n\n        renderer.current.render(scene.current, camera.current);\n      });\n    } else {\n      renderer.current.render(scene.current, camera.current);\n    }\n\n    return () => {\n      renderer.current.setAnimationLoop(null);\n    };\n  }, [isInViewport, prefersReducedMotion]);\n\n  return (\n    <Transition appear in onEnter={reflow} timeout={3000}>\n      {status => (\n        <canvas\n          aria-hidden\n          className={classNames('displacement-sphere', `displacement-sphere--${status}`)}\n          ref={canvas}\n          {...props}\n        />\n      )}\n    </Transition>\n  );\n};\n\nexport default DisplacementSphere;\n","//\n// GLSL textureless classic 3D noise \"cnoise\",\n// with an RSL-style periodic variant \"pnoise\".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-10-11\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nexport default `\nvec3 mod289(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise(vec3 P)\n{\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n\n// Classic Perlin noise, periodic variant\nfloat pnoise(vec3 P, vec3 rep)\n{\n  vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\n  vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n\nfloat turbulence(vec3 p) {\n  float w = 100.0;\n  float t = -.5;\n  for (float f = 1.0 ; f <= 10.0 ; f++) {\n    float power = pow(2.0, f);\n    t += abs(pnoise(vec3(power * p), vec3(10.0, 10.0, 10.0)) / power);\n  }\n  return t;\n}\n\n// START\nuniform float time;\nvarying vec2 vUv;\nvarying vec3 vNormal;\nvarying float noise;\n\nvarying vec3 vViewPosition;\n\nvoid main() {\n  #include <beginnormal_vertex>\n  #include <defaultnormal_vertex>\n  #include <begin_vertex>\n  #include <project_vertex>\n  #ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n    vNormal = normalize(transformedNormal);\n  #endif\n\n  vViewPosition = - mvPosition.xyz;\n\n  vUv = uv;\n\n  noise = turbulence(0.01 * position + normal + time * 0.8);\n  vec3 displacement = vec3((position.x) * noise, position.y * noise, position.z * noise);\n  gl_Position = projectionMatrix * modelViewMatrix * vec4((position + normal) + displacement, 1.0);\n}\n`;\n","export default `\n#define PHONG\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\nuniform float time;\nvarying vec2 vUv;\nvarying vec3 newPosition;\nvarying float noise;\n\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <envmap_physical_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n  #include <clipping_planes_fragment>\n\n  vec3 color = vec3(vUv * (0.2 - 2.0 * noise), 1.0);\n  vec3 finalColors = vec3(color.b * 1.5, color.r, color.r);\n  vec4 diffuseColor = vec4(cos(finalColors * noise * 3.0), 1.0);\n  ReflectedLight reflectedLight = ReflectedLight(vec3(0.0), vec3(0.0), vec3(0.0), vec3(0.0));\n  vec3 totalEmissiveRadiance = emissive;\n\n  #include <logdepthbuf_fragment>\n  #include <map_fragment>\n  #include <color_fragment>\n  #include <alphamap_fragment>\n  #include <alphatest_fragment>\n  #include <specularmap_fragment>\n  #include <normal_fragment_begin>\n  #include <normal_fragment_maps>\n  #include <emissivemap_fragment>\n  #include <lights_phong_fragment>\n  #include <lights_fragment_begin>\n  #include <lights_fragment_maps>\n  #include <lights_fragment_end>\n  #include <aomap_fragment>\n\n  vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n  #include <envmap_fragment>\n  #include <premultiplied_alpha_fragment>\n  #include <tonemapping_fragment>\n  #include <encodings_fragment>\n  #include <fog_fragment>\n\n  gl_FragColor = vec4(outgoingLight, diffuseColor.a);\n}\n`;\n"],"sourceRoot":""}