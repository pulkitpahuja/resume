{"version":3,"sources":["components/Input/TextArea.js","components/Input/index.js","components/Table/index.js","resume/Contact/index.js","components/Heading/index.js","components/Text/index.js","assets/fonts/gotham-bold.woff2","components/Section/index.js","components/DecoderText/index.js","components/Divider/index.js"],"names":["TextArea","className","resize","value","onChange","minRows","maxRows","rest","rows","setRows","useState","textareaDimensions","setTextareaDimensions","textareaRef","useRef","useEffect","style","getComputedStyle","current","lineHeight","parseInt","paddingHeight","paddingTop","paddingBottom","classNames","ref","event","previousRows","target","currentRows","scrollHeight","scrollTop","Input","id","label","hasValue","multiline","error","onBlur","focused","setFocused","generatedId","useId","errorRef","inputId","labelId","errorId","InputElement","htmlFor","aria-labelledby","aria-describedby","undefined","onFocus","TransitionGroup","component","Transition","timeout","msToNum","tokens","base","durationM","status","role","isVisible","numToPx","getBoundingClientRect","height","Icon","icon","Table","children","TableRow","TableCell","initDelay","durationS","getDelay","delayMs","initDelayMs","numToMs","multiplier","numDelay","toFixed","Contact","useRouteTransition","email","useFormInput","message","sending","setSending","complete","setComplete","statusError","setStatusError","useScrollRestore","onSubmit","useCallback","async","preventDefault","response","fetch","method","mode","headers","body","JSON","stringify","responseMessage","json","errorMessage","fallback","500","404","getStatusError","Error","Section","Helmet","name","content","appear","mountOnEnter","unmountOnExit","onEnter","reflow","Heading","prerender","level","as","durationXS","DecoderText","text","start","delay","Divider","required","autoComplete","type","maxLength","errorStatus","Button","disabled","loading","loadingText","aria-live","Text","size","secondary","iconHoverShift","href","align","weight","clampedLevel","Math","min","max","Component","rel","GothamBold","crossorigin","forwardRef","glyphs","CharType","startDelay","output","container","reduceMotion","usePrefersReducedMotion","containerInstance","split","animation","renderOutput","characterMap","map","item","innerHTML","join","springValue","position","index","rand","floor","random","length","shuffle","chain","spring","from","to","stiffness","damping","stop","aria-hidden","memo","lineWidth","notchWidth","notchHeight","collapseDelay","collapsed","defaultProps"],"mappings":"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","file":"static/js/7.a1e20818.chunk.js","sourcesContent":["import { useRef, useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport './TextArea.css';\n\nconst TextArea = ({\n  className,\n  resize = 'none',\n  value,\n  onChange,\n  minRows = 1,\n  maxRows,\n  ...rest\n}) => {\n  const [rows, setRows] = useState(minRows);\n  const [textareaDimensions, setTextareaDimensions] = useState();\n  const textareaRef = useRef();\n\n  useEffect(() => {\n    const style = getComputedStyle(textareaRef.current);\n    const lineHeight = parseInt(style.lineHeight, 10);\n    const paddingHeight =\n      parseInt(style.paddingTop, 10) + parseInt(style.paddingBottom, 10);\n    setTextareaDimensions({ lineHeight, paddingHeight });\n  }, []);\n\n  const handleChange = event => {\n    onChange(event);\n\n    const { lineHeight, paddingHeight } = textareaDimensions;\n    const previousRows = event.target.rows;\n    event.target.rows = minRows;\n\n    const currentRows = ~~((event.target.scrollHeight - paddingHeight) / lineHeight);\n\n    if (currentRows === previousRows) {\n      event.target.rows = currentRows;\n    }\n\n    if (maxRows && currentRows >= maxRows) {\n      event.target.rows = maxRows;\n      event.target.scrollTop = event.target.scrollHeight;\n    }\n\n    setRows(maxRows && currentRows > maxRows ? maxRows : currentRows);\n  };\n\n  return (\n    <textarea\n      className={classNames('textarea', className)}\n      ref={textareaRef}\n      onChange={handleChange}\n      style={{ '--resize': resize }}\n      rows={rows}\n      value={value}\n      {...rest}\n    />\n  );\n};\n\nexport default TextArea;\n","import { useState, useRef } from 'react';\nimport classNames from 'classnames';\nimport { TransitionGroup, Transition } from 'react-transition-group';\nimport TextArea from './TextArea';\nimport { useId } from 'hooks';\nimport { isVisible } from 'utils/transition';\nimport { tokens } from 'components/ThemeProvider/theme';\nimport { msToNum, numToPx } from 'utils/style';\nimport Icon from 'components/Icon';\nimport './index.css';\n\nconst Input = ({\n  id,\n  label,\n  hasValue,\n  value,\n  multiline,\n  className,\n  style,\n  error,\n  onBlur,\n  ...rest\n}) => {\n  const [focused, setFocused] = useState(false);\n  const generatedId = useId();\n  const errorRef = useRef();\n  const inputId = id || `input-${generatedId}`;\n  const labelId = `${inputId}-label`;\n  const errorId = `${inputId}-error`;\n  const InputElement = multiline ? TextArea : 'input';\n\n  const handleBlur = event => {\n    setFocused(false);\n\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n\n  return (\n    <div\n      className={classNames('input', className, { 'input--error': !!error })}\n      style={style}\n    >\n      <div className=\"input__content\">\n        <label\n          className={classNames('input__label', {\n            'input__label--focused': focused,\n            'input__label--has-value': !!value,\n          })}\n          id={labelId}\n          htmlFor={inputId}\n        >\n          {label}\n        </label>\n        <InputElement\n          className=\"input__element\"\n          id={inputId}\n          aria-labelledby={labelId}\n          aria-describedby={!!error ? errorId : undefined}\n          onFocus={() => setFocused(true)}\n          onBlur={handleBlur}\n          value={value}\n          {...rest}\n        />\n        <div\n          className={classNames('input__underline', {\n            'input__underline--focused': focused,\n          })}\n        />\n      </div>\n      <TransitionGroup component={null}>\n        {!!error && (\n          <Transition timeout={msToNum(tokens.base.durationM)}>\n            {status => (\n              <div\n                className={classNames('input__error', `input__error--${status}`)}\n                id={errorId}\n                role=\"alert\"\n                style={{\n                  '--height': isVisible(status)\n                    ? numToPx(errorRef.current?.getBoundingClientRect().height)\n                    : '0px',\n                }}\n              >\n                <div className=\"input__error-message\" ref={errorRef}>\n                  <Icon icon=\"error\" />\n                  {error}\n                </div>\n              </div>\n            )}\n          </Transition>\n        )}\n      </TransitionGroup>\n    </div>\n  );\n};\n\nexport default Input;\n","import './index.css';\n\nexport const Table = ({ children }) => (\n  <table className=\"table\">\n    <tbody className=\"table__body\">{children}</tbody>\n  </table>\n);\n\nexport const TableRow = ({ children }) => <tr className=\"table__row\">{children}</tr>;\n\nexport const TableCell = ({ children }) => <td className=\"table__cell\">{children}</td>;\n","import { useState, useCallback, useRef } from 'react';\nimport classNames from 'classnames';\nimport { TransitionGroup, Transition } from 'react-transition-group';\nimport { Helmet } from 'react-helmet';\nimport Input from 'components/Input';\nimport { Table, TableRow, TableCell } from 'components/Table';\nimport DecoderText from 'components/DecoderText';\nimport Divider from 'components/Divider';\nimport { Button } from 'components/Button';\nimport Section from 'components/Section';\nimport Icon from 'components/Icon';\nimport Heading from 'components/Heading';\nimport Text from 'components/Text';\nimport { useScrollRestore, useFormInput, useRouteTransition } from 'hooks';\nimport { reflow, isVisible } from 'utils/transition';\nimport prerender from 'utils/prerender';\nimport { msToNum, numToPx, numToMs } from 'utils/style';\nimport { tokens } from 'components/ThemeProvider/theme';\nimport './index.css';\n\nconst initDelay = tokens.base.durationS;\n\nfunction getStatusError({\n  status,\n  errorMessage,\n  fallback = 'There was a problem with your request',\n}) {\n  if (status === 200) return false;\n\n  const statuses = {\n    500: 'There was a problem with the server, try again later',\n    404: 'There was a problem connecting to the server. Make sure you are connected to the internet',\n  };\n\n  if (errorMessage) {\n    return errorMessage;\n  }\n\n  return statuses[status] || fallback;\n}\n\nfunction getDelay(delayMs, initDelayMs = numToMs(0), multiplier = 1) {\n  const numDelay = msToNum(delayMs) * multiplier;\n  return { '--delay': numToMs((msToNum(initDelayMs) + numDelay).toFixed(0)) };\n}\n\nconst Contact = () => {\n  const { status } = useRouteTransition();\n  const errorRef = useRef();\n  const email = useFormInput('');\n  const message = useFormInput('');\n  const [sending, setSending] = useState(false);\n  const [complete, setComplete] = useState(false);\n  const [statusError, setStatusError] = useState('');\n  useScrollRestore();\n\n  const onSubmit = useCallback(\n    async event => {\n      event.preventDefault();\n      setStatusError('');\n\n      if (sending) return;\n\n      try {\n        setSending(true);\n\n        const response = await fetch('/api/message', {\n          method: 'POST',\n          mode: 'cors',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            email: email.value,\n            message: message.value,\n          }),\n        });\n\n        const responseMessage = await response.json();\n\n        const statusError = getStatusError({\n          status: response?.status,\n          errorMessage: responseMessage?.error,\n          fallback: 'There was a problem sending your message',\n        });\n\n        if (statusError) throw new Error(statusError);\n\n        setComplete(true);\n        setSending(false);\n      } catch (error) {\n        setSending(false);\n        setStatusError(error.message);\n      }\n    },\n    [email.value, message.value, sending]\n  );\n\n  return (\n    <Section className={classNames('contact', `contact--${status}`)}>\n      <Helmet>\n        <title>Contact | Pulkit Pahuja</title>\n        <meta\n          name=\"description\"\n          content=\"Send me a message if you’re interested in discussing a project or if you just want to say hi\"\n        />\n      </Helmet>\n      <TransitionGroup component={null}>\n        {!complete && (\n          <Transition appear mountOnEnter unmountOnExit timeout={1600} onEnter={reflow}>\n            {status => (\n              <form className=\"contact__form\" method=\"post\" onSubmit={onSubmit}>\n                <Heading\n                  className={classNames('contact__title', `contact__title--${status}`, {\n                    'contact__title--hidden': prerender,\n                  })}\n                  level={3}\n                  as=\"h1\"\n                  style={getDelay(tokens.base.durationXS, initDelay, 0.3)}\n                >\n                  <DecoderText\n                    text=\"Contact Information\"\n                    start={status !== 'exited' && !prerender}\n                    delay={300}\n                  />\n                </Heading>\n                <Divider\n                  className={classNames(\n                    'contact__divider',\n                    `contact__divider--${status}`,\n                    { 'contact__divider--hidden': prerender }\n                  )}\n                  style={getDelay(tokens.base.durationXS, initDelay, 0.4)}\n                />\n                <Table\n                  style={getDelay(tokens.base.durationXS, initDelay, 0.3)}\n                  className={classNames(\n                    'contact__divider',\n                    `contact__divider--${status}`,\n                    { 'contact__divider--hidden': prerender }\n                  )}\n                >\n                  <TableRow>\n                    <TableCell>\n                      Location:\n                    </TableCell>\n                    <TableCell>\n                      Dwarka, New Delhi, India- 110075\n                    </TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>\n                      Email:\n                    </TableCell>\n                    <TableCell>\n                      pulkit.pahuja98@gmail.com\n                    </TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>\n                      Call:\n                    </TableCell>\n                    <TableCell>\n                      +91-9999876208\n                    </TableCell>\n                  </TableRow>\n                </Table>\n                <Divider\n                  className={classNames(\n                    'contact__divider',\n\n                    { 'contact__divider--hidden': prerender }\n                  )}\n                  style={getDelay(tokens.base.durationXS, initDelay, 0.4)}\n                />\n                <Heading\n                  className={classNames('contact__title', `contact__title--${status}`, {\n                    'contact__title--hidden': prerender,\n                  })}\n                  level={3}\n                  as=\"h1\"\n                  style={getDelay(tokens.base.durationXS, initDelay, 0.3)}\n                >\n                  <DecoderText\n                    text=\"Say hello\"\n                    start={status !== 'exited' && !prerender}\n                    delay={300}\n                  />\n                </Heading>\n                <Divider\n                  className={classNames(\n                    'contact__divider',\n                    `contact__divider--${status}`,\n                    { 'contact__divider--hidden': prerender }\n                  )}\n                  style={getDelay(tokens.base.durationXS, initDelay, 0.4)}\n                />\n                <Input\n                  required\n                  className={classNames('contact__input', `contact__input--${status}`, {\n                    'contact__input--hidden': prerender,\n                  })}\n                  style={getDelay(tokens.base.durationXS, initDelay)}\n                  autoComplete=\"email\"\n                  label=\"Your Email\"\n                  type=\"email\"\n                  maxLength={512}\n                  {...email}\n                />\n                <Input\n                  required\n                  multiline\n                  className={classNames('contact__input', `contact__input--${status}`, {\n                    'contact__input--hidden': prerender,\n                  })}\n                  style={getDelay(tokens.base.durationS, initDelay)}\n                  autoComplete=\"off\"\n                  label=\"Message\"\n                  maxLength={4096}\n                  {...message}\n                />\n                <TransitionGroup component={null}>\n                  {!!statusError && (\n                    <Transition timeout={msToNum(tokens.base.durationM)}>\n                      {errorStatus => (\n                        <div\n                          className={classNames(\n                            'contact__form-error',\n                            `contact__form-error--${errorStatus}`\n                          )}\n                          style={{\n                            '--height': isVisible(errorStatus)\n                              ? numToPx(errorRef.current?.getBoundingClientRect().height)\n                              : '0px',\n                          }}\n                        >\n                          <div className=\"contact__form-error-content\" ref={errorRef}>\n                            <div className=\"contact__form-error-message\">\n                              <Icon className=\"contact__form-error-icon\" icon=\"error\" />\n                              {statusError}\n                            </div>\n                          </div>\n                        </div>\n                      )}\n                    </Transition>\n                  )}\n                </TransitionGroup>\n                <Button\n                  className={classNames('contact__button', `contact__button--${status}`, {\n                    'contact__button--hidden': prerender,\n                    'contact__button--sending': sending,\n                  })}\n                  style={getDelay(tokens.base.durationM, initDelay)}\n                  disabled={sending}\n                  loading={sending}\n                  loadingText=\"Sending...\"\n                  icon=\"send\"\n                  type=\"submit\"\n                >\n                  Send Message\n                </Button>\n              </form>\n            )}\n          </Transition>\n        )}\n        {complete && (\n          <Transition appear mountOnEnter unmountOnExit onEnter={reflow} timeout={0}>\n            {status => (\n              <div className=\"contact__complete\" aria-live=\"polite\">\n                <Heading\n                  level={3}\n                  as=\"h3\"\n                  className={classNames(\n                    'contact__complete-title',\n                    `contact__complete-title--${status}`\n                  )}\n                >\n                  Message Sent\n                </Heading>\n                <Text\n                  size=\"l\"\n                  className={classNames(\n                    'contact__complete-text',\n                    `contact__complete-text--${status}`\n                  )}\n                  style={getDelay(tokens.base.durationXS)}\n                >\n                  I’ll get back to you within a couple days\n                </Text>\n                <Button\n                  secondary\n                  iconHoverShift\n                  className={classNames(\n                    'contact__complete-button',\n                    `contact__complete-button--${status}`\n                  )}\n                  style={getDelay(tokens.base.durationM)}\n                  href=\"/\"\n                  icon=\"chevronRight\"\n                >\n                  Back to homepage\n                </Button>\n              </div>\n            )}\n          </Transition>\n        )}\n      </TransitionGroup>\n    </Section>\n  );\n};\n\nexport default Contact;\n","import { Fragment } from 'react';\nimport classNames from 'classnames';\nimport { Helmet } from 'react-helmet';\nimport GothamBold from 'assets/fonts/gotham-bold.woff2';\nimport './index.css';\n\nconst Heading = ({\n  children,\n  level = 1,\n  as,\n  align = 'auto',\n  weight = 'medium',\n  className,\n  ...rest\n}) => {\n  const clampedLevel = Math.min(Math.max(level, 0), 4);\n  const Component = as || `h${Math.max(clampedLevel, 1)}`;\n\n  return (\n    <Fragment>\n      {/* Conditionally load the bold font weight because we use it less frequently */}\n      {weight === 'bold' && (\n        <Helmet>\n          <link rel=\"preload\" href={GothamBold} as=\"font\" crossorigin=\"\" />\n          <style>\n            {`\n              @font-face {\n                font-family: 'Gotham';\n                font-weight: 700;\n                src: url(${GothamBold}) format('woff2');\n                font-display: swap;\n              }\n            `}\n          </style>\n        </Helmet>\n      )}\n      <Component\n        className={classNames(\n          className,\n          'heading',\n          `heading--align-${align}`,\n          `heading--level-${clampedLevel}`,\n          `heading--weight-${weight}`\n        )}\n        {...rest}\n      >\n        {children}\n      </Component>\n    </Fragment>\n  );\n};\n\nexport default Heading;\n","import classNames from 'classnames';\nimport './index.css';\n\nconst Text = ({\n  children,\n  size = 'm',\n  as: Component = 'p',\n  align = 'auto',\n  weight = 'auto',\n  secondary,\n  className,\n  ...rest\n}) => {\n  return (\n    <Component\n      className={classNames(\n        className,\n        'text',\n        `text--align-${align}`,\n        `text--size-${size}`,\n        `text--weight-${weight}`,\n        {\n          'text--secondary': secondary,\n        }\n      )}\n      {...rest}\n    >\n      {children}\n    </Component>\n  );\n};\n\nexport default Text;\n","export default __webpack_public_path__ + \"static/media/gotham-bold.73ce573b.woff2\";","import { forwardRef } from 'react';\nimport classNames from 'classnames';\nimport './index.css';\n\nconst Section = forwardRef(\n  ({ as: Component = 'div', children, className, ...rest }, ref) => (\n    <Component className={classNames('section', className)} ref={ref} {...rest}>\n      {children}\n    </Component>\n  )\n);\n\nexport default Section;\n","import { useRef, useEffect, memo } from 'react';\nimport classNames from 'classnames';\nimport { usePrefersReducedMotion } from 'hooks';\nimport { spring, chain, delay, value } from 'popmotion';\nimport VisuallyHidden from 'components/VisuallyHidden';\nimport prerender from 'utils/prerender';\nimport './index.css';\n\n// prettier-ignore\nconst glyphs = [\n  'ア', 'イ', 'ウ', 'エ', 'オ',\n  'カ', 'キ', 'ク', 'ケ', 'コ',\n  'サ', 'シ', 'ス', 'セ', 'ソ',\n  'タ', 'チ', 'ツ', 'テ', 'ト',\n  'ナ', 'ニ', 'ヌ', 'ネ', 'ノ',\n  'ハ', 'ヒ', 'フ', 'ヘ', 'ホ',\n  'マ', 'ミ', 'ム', 'メ', 'モ',\n  'ヤ', 'ユ', 'ヨ', 'ー',\n  'ラ', 'リ', 'ル', 'レ', 'ロ',\n  'ワ', 'ヰ', 'ヱ', 'ヲ', 'ン',\n  'ガ', 'ギ', 'グ', 'ゲ', 'ゴ',\n  'ザ', 'ジ', 'ズ', 'ゼ', 'ゾ',\n  'ダ', 'ヂ', 'ヅ', 'デ', 'ド',\n  'バ', 'ビ', 'ブ', 'ベ', 'ボ',\n  'パ', 'ピ', 'プ', 'ペ', 'ポ',\n];\n\nconst CharType = {\n  Glyph: 'glyph',\n  Value: 'value',\n};\n\nfunction shuffle(content, output, position) {\n  return content.map((value, index) => {\n    if (index < position) {\n      return { type: CharType.Value, value };\n    }\n\n    if (position % 1 < 0.5) {\n      const rand = Math.floor(Math.random() * glyphs.length);\n      return { type: CharType.Glyph, value: glyphs[rand] };\n    }\n\n    return { type: CharType.Glyph, value: output[index].value };\n  });\n}\n\nconst DecoderText = ({\n  text,\n  start = true,\n  delay: startDelay = 0,\n  className,\n  ...rest\n}) => {\n  const output = useRef([{ type: CharType.Glyph, value: '' }]);\n  const container = useRef();\n  const reduceMotion = usePrefersReducedMotion();\n\n  useEffect(() => {\n    const containerInstance = container.current;\n    const content = text.split('');\n    let animation;\n\n    const renderOutput = () => {\n      const characterMap = output.current.map(item => {\n        return `<span class=\"decoder-text__${item.type}\">${item.value}</span>`;\n      });\n\n      containerInstance.innerHTML = characterMap.join('');\n    };\n\n    const springValue = value(0, position => {\n      output.current = shuffle(content, output.current, position);\n      renderOutput();\n    });\n\n    if (start && !animation && !reduceMotion && !prerender) {\n      animation = chain(\n        delay(startDelay),\n        spring({\n          from: 0,\n          to: content.length,\n          stiffness: 8,\n          damping: 5,\n        })\n      ).start(springValue);\n    }\n\n    if (reduceMotion) {\n      output.current = content.map((value, index) => ({\n        type: CharType.Value,\n        value: content[index],\n      }));\n      renderOutput();\n    }\n\n    return () => {\n      if (animation) {\n        animation.stop();\n      }\n    };\n  }, [reduceMotion, start, startDelay, text]);\n\n  return (\n    <span className={classNames('decoder-text', className)} {...rest}>\n      <VisuallyHidden className=\"decoder-text__label\">{text}</VisuallyHidden>\n      <span aria-hidden className=\"decoder-text__content\" ref={container} />\n    </span>\n  );\n};\n\nexport default memo(DecoderText);\n","import classNames from 'classnames';\nimport { numToMs } from 'utils/style';\nimport './index.css';\n\nconst Divider = ({\n  lineWidth,\n  lineHeight,\n  notchWidth,\n  notchHeight,\n  collapseDelay,\n  collapsed,\n  className,\n  style,\n}) => (\n  <div\n    className={classNames('divider', className)}\n    style={{\n      '--lineWidth': lineWidth,\n      '--lineHeight': lineHeight,\n      '--notchWidth': notchWidth,\n      '--notchHeight': notchHeight,\n      '--collapseDelay': numToMs(collapseDelay),\n      ...style,\n    }}\n  >\n    <div\n      className={classNames('divider__line', { 'divider__line--collapsed': collapsed })}\n    />\n    <div\n      className={classNames('divider__notch', { 'divider__notch--collapsed': collapsed })}\n      style={{ '--collapseDelay': numToMs(collapseDelay + 160) }}\n    />\n  </div>\n);\n\nDivider.defaultProps = {\n  lineWidth: '100%',\n  lineHeight: '2px',\n  notchWidth: '90px',\n  notchHeight: '10px',\n  collapsed: false,\n  collapseDelay: 0,\n};\n\nexport default Divider;\n"],"sourceRoot":""}